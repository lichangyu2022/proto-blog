(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{522:function(v,_,t){"use strict";t.r(_);var a=t(31),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"数据类型介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型介绍"}},[v._v("#")]),v._v(" 数据类型介绍")]),v._v(" "),t("p",[v._v("mysql基本数据类型主要包括："),t("strong",[v._v("整数类型，浮点数类型，时间日期类型，字符串类型")]),v._v("等。")]),v._v(" "),t("p",[v._v("这里先了解下无符号：")]),v._v(" "),t("ol",[t("li",[v._v("无符号由unsigned修饰，表示非负数。")]),v._v(" "),t("li",[v._v("用此类型可以增加数据长度，比如说tinyint最大是127，那 tinyint unsigned 最大就可以到127 * 2")]),v._v(" "),t("li",[v._v("unsigned只针对整型")])]),v._v(" "),t("p",[v._v("如果有不清楚有符号和无符号概念的，可以看看计算机基础，二进制的有符号和无符号")]),v._v(" "),t("h2",{attrs:{id:"整数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数类型"}},[v._v("#")]),v._v(" 整数类型")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("类型")]),v._v(" "),t("th",[v._v("大小")]),v._v(" "),t("th",[v._v("范围(有符号)")]),v._v(" "),t("th",[v._v("范围(无符号)")]),v._v(" "),t("th",[v._v("用途")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("TINYINT")]),v._v(" "),t("td",[v._v("1字节")]),v._v(" "),t("td",[v._v("(-128,127)")]),v._v(" "),t("td",[v._v("(0,255)")]),v._v(" "),t("td",[v._v("小整数值")])]),v._v(" "),t("tr",[t("td",[v._v("SMALLINT")]),v._v(" "),t("td",[v._v("2字节")]),v._v(" "),t("td",[v._v("(-32768，32767)")]),v._v(" "),t("td",[v._v("(0,65535)")]),v._v(" "),t("td",[v._v("大整数值")])]),v._v(" "),t("tr",[t("td",[v._v("MEDIUMINT")]),v._v(" "),t("td",[v._v("3字节")]),v._v(" "),t("td",[v._v("(-838 8608，838 8607)")]),v._v(" "),t("td",[v._v("(0,1677 7215)")]),v._v(" "),t("td",[v._v("大整数值")])]),v._v(" "),t("tr",[t("td",[v._v("INT")]),v._v(" "),t("td",[v._v("4字节")]),v._v(" "),t("td",[v._v("(-21 4748 3648，21 4748 3647)")]),v._v(" "),t("td",[v._v("(0,42 9496 7295)")]),v._v(" "),t("td",[v._v("大整数值")])]),v._v(" "),t("tr",[t("td",[v._v("BIGINT")]),v._v(" "),t("td",[v._v("8字节")]),v._v(" "),t("td",[v._v("(-922 3372 0368 5477 5808，922 3372 0368 5477 5807)")]),v._v(" "),t("td",[v._v("(0,1844 6744 0737 0955 1615)")]),v._v(" "),t("td",[v._v("极大整数值")])])])]),v._v(" "),t("ol",[t("li",[v._v("如果整形数据没有负数，如ID号，建议指定为UNSIGNED无符号类型，容量可以扩大一倍。")]),v._v(" "),t("li",[v._v("建议使用TINYINT代替ENUM、BITENUM、SET。")]),v._v(" "),t("li",[v._v("避免使用整数的显示宽度(文档最后)，也就是说，不要用INT(10)类似的方法指定字段显示宽度，直接用INT。")]),v._v(" "),t("li",[v._v("建议使用整形类型来运算和存储实数，方法是，实数乘以相应的倍数后再操作。")]),v._v(" "),t("li",[v._v("整数通常是最佳的数据类型，因为它速度快，并且能使用AUTO_INCREMENT")])]),v._v(" "),t("h3",{attrs:{id:"int-显示长度问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int-显示长度问题"}},[v._v("#")]),v._v(" int 显示长度问题")]),v._v(" "),t("p",[v._v("我们经常会使用命令来创建数据表，而且同时会指定一个长度，如下。但是，这里的长度并非是TINYINT类型存储的最大长度，而是显示的最大长度。")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("CREATE TABLE `user`(\n `id` TINYINT(2) UNSIGNED\n );\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br")])]),t("p",[v._v("这里表示user表的id字段的类型是TINYINT，可以存储的最大数值是255。所以，在存储数据时，如果存入值小于等于255，如200，虽然超过2位，但是没有超出TINYINT类型长度，所以可以正常保存；如果存入值大于255，如500，那么MySQL会自动保存为TINYINT类型的最大值255。"),t("br")]),v._v(" "),t("p",[v._v("在查询数据时，不管查询结果为何值，都按实际输出。这里TINYINT(2)中2的作用就是，当需要在查询结果前填充0时，命令中加上ZEROFILL就可以实现，如")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("`id` TINYINT(2) UNSIGNED ZEROFILL\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("这样，查询结果如果是5，那输出就是05。如果指定TINYINT(5)，那输出就是00005，其实实际存储的值还是5，而且存储的数据不会超过255，只是MySQL输出数据时在前面填充了0。"),t("br")]),v._v(" "),t("p",[v._v("换句话说，在MySQL命令中，字段的类型长度TINYINT(2)、INT(11)不会影响数据的插入，只会在使用ZEROFILL时有用，让查询结果前填充0 "),t("br")]),v._v(" "),t("h2",{attrs:{id:"浮点类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型"}},[v._v("#")]),v._v(" 浮点类型")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("类型")]),v._v(" "),t("th",[v._v("大小")]),v._v(" "),t("th",[v._v("范围(有符号)")]),v._v(" "),t("th",[v._v("范围(无符号)")]),v._v(" "),t("th",[v._v("用途")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("FLOAT")]),v._v(" "),t("td",[v._v("4字节")]),v._v(" "),t("td",[v._v("(-3.402823466E+38,-1.175494351E-38),0,(1.175494351E-38,3.402823466351E+38)")]),v._v(" "),t("td",[v._v("0,(1.175494351E-38,3.402823466351E+38)")]),v._v(" "),t("td",[v._v("单精度浮点数")])]),v._v(" "),t("tr",[t("td",[v._v("DOUBLE")]),v._v(" "),t("td",[v._v("8字节")]),v._v(" "),t("td",[v._v("(-1.7976931348623157E+308,-2.2250738585072014E-308),0,(2.2250738585072014E-308,1.7976931348623157E+308)")]),v._v(" "),t("td",[v._v("0,(2.2250738585072014E-308,1.7976931348623157E+308)")]),v._v(" "),t("td",[v._v("双精度浮点数")])]),v._v(" "),t("tr",[t("td",[v._v("DECIMAL")]),v._v(" "),t("td",[v._v("对DECIMAL(M,D) ,如果M>D,为M+2否则为D+2")]),v._v(" "),t("td",[v._v("依赖于M和D的值")]),v._v(" "),t("td",[v._v("依赖于M和D的值")]),v._v(" "),t("td",[v._v("小数值")])])])]),v._v(" "),t("ol",[t("li",[v._v("DECIMAL最适合保存准确度要求高，而且用于计算的数据，比如价格。但是在使用DECIMAL类型的时候，注意长度设置。")])]),v._v(" "),t("h2",{attrs:{id:"日期类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日期类型"}},[v._v("#")]),v._v(" 日期类型")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("类型")]),v._v(" "),t("th",[v._v("大小(bytes)")]),v._v(" "),t("th",[v._v("范围")]),v._v(" "),t("th",[v._v("格式")]),v._v(" "),t("th",[v._v("用途")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("date")]),v._v(" "),t("td",[v._v("3")]),v._v(" "),t("td",[v._v("1000-01-01/9999-12-31")]),v._v(" "),t("td",[v._v("YYYY-MM-DD")]),v._v(" "),t("td",[v._v("日期值")])]),v._v(" "),t("tr",[t("td",[v._v("time")]),v._v(" "),t("td",[v._v("3")]),v._v(" "),t("td",[v._v("‘-838:59:59’/‘838:59:59’")]),v._v(" "),t("td",[v._v("HH:MM:SS")]),v._v(" "),t("td",[v._v("时间值或持续时间")])]),v._v(" "),t("tr",[t("td",[v._v("year")]),v._v(" "),t("td",[v._v("1")]),v._v(" "),t("td",[v._v("1901/2155")]),v._v(" "),t("td",[v._v("YYYY")]),v._v(" "),t("td",[v._v("年份值")])]),v._v(" "),t("tr",[t("td",[v._v("datetime")]),v._v(" "),t("td",[v._v("8")]),v._v(" "),t("td",[v._v("1000-01-01 00:00:00/9999-12-31 23:59:59")]),v._v(" "),t("td",[v._v("YYYY-MM-DD HH:MM:SS")]),v._v(" "),t("td",[v._v("混合日期和时间值")])]),v._v(" "),t("tr",[t("td",[v._v("timestamp")]),v._v(" "),t("td",[v._v("4")]),v._v(" "),t("td",[v._v("1970-01-01 00:00:00/2038结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07")]),v._v(" "),t("td",[v._v("YYYYMMDD HHMMSS")]),v._v(" "),t("td",[v._v("混合日期和时间值，时间戳")])])])]),v._v(" "),t("ol",[t("li",[v._v("MySQL能存储的最小时间粒度为秒。")]),v._v(" "),t("li",[v._v("建议用DATE数据类型来保存日期。MySQL中默认的日期格式是yyyy-mm-dd。")]),v._v(" "),t("li",[v._v("用MySQL的内建类型DATE、TIME、DATETIME来存储时间，而不是使用字符串。")]),v._v(" "),t("li",[v._v("当数据格式为TIMESTAMP和DATETIME时，可以用CURRENT_TIMESTAMP作为默认（MySQL5.6以后），MySQL会自动返回记录插入的确切时间。")]),v._v(" "),t("li",[v._v("TIMESTAMP是UTC时间戳，与时区相关。")]),v._v(" "),t("li",[v._v("DATETIME的存储格式是一个YYYYMMDD HH:MM:SS的整数，与时区无关，你存了什么，读出来就是什么。")]),v._v(" "),t("li",[v._v("除非有特殊需求，一般的公司建议使用TIMESTAMP，它比DATETIME更节约空间，但是像阿里这样的公司一般会用DATETIME，因为不用考虑TIMESTAMP将来的时间上限问题。")]),v._v(" "),t("li",[v._v("有时人们把Unix的时间戳保存为整数值，但是这通常没有任何好处，这种格式处理起来不太方便，我们并不推荐\n它。")])]),v._v(" "),t("h2",{attrs:{id:"字符串类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[v._v("#")]),v._v(" 字符串类型")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("类型")]),v._v(" "),t("th",[v._v("大小")]),v._v(" "),t("th",[v._v("用途")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("char")]),v._v(" "),t("td",[v._v("0-255 bytes")]),v._v(" "),t("td",[v._v("定长字符串")])]),v._v(" "),t("tr",[t("td",[v._v("varchar")]),v._v(" "),t("td",[v._v("0-65535 bytes")]),v._v(" "),t("td",[v._v("变长字符串")])]),v._v(" "),t("tr",[t("td",[v._v("tinyblob")]),v._v(" "),t("td",[v._v("0-255 bytes")]),v._v(" "),t("td",[v._v("不超过 255 个字符的二进制字符串")])]),v._v(" "),t("tr",[t("td",[v._v("tinytext")]),v._v(" "),t("td",[v._v("0-255 bytes")]),v._v(" "),t("td",[v._v("短文本字符串")])]),v._v(" "),t("tr",[t("td",[v._v("blob")]),v._v(" "),t("td",[v._v("0-65535 bytes")]),v._v(" "),t("td",[v._v("二进制形式的长文本数据")])]),v._v(" "),t("tr",[t("td",[v._v("text")]),v._v(" "),t("td",[v._v("0-65535 bytes")]),v._v(" "),t("td",[v._v("长文本数据")])]),v._v(" "),t("tr",[t("td",[v._v("mediumblob")]),v._v(" "),t("td",[v._v("0-1677 7215 bytes")]),v._v(" "),t("td",[v._v("二进制形式的中等长度文本数据")])]),v._v(" "),t("tr",[t("td",[v._v("mediumtext")]),v._v(" "),t("td",[v._v("0-1677 7215 bytes")]),v._v(" "),t("td",[v._v("中等长度文本数据")])]),v._v(" "),t("tr",[t("td",[v._v("longblob")]),v._v(" "),t("td",[v._v("0-42 9496 7295 bytes")]),v._v(" "),t("td",[v._v("二进制形式的极大文本数据")])]),v._v(" "),t("tr",[t("td",[v._v("longtext")]),v._v(" "),t("td",[v._v("0-42 9496 7295 bytes")]),v._v(" "),t("td",[v._v("极大文本数据")])])])]),v._v(" "),t("ol",[t("li",[v._v("字符串的长度相差较大用VARCHAR；字符串短，且所有值都接近一个长度用CHAR。")]),v._v(" "),t("li",[v._v("CHAR和VARCHAR适用于包括人名、邮政编码、电话号码和不超过255个字符长度的任意字母数字组合。那些要用来计算的数字不要用VARCHAR类型保存，因为可能会导致一些与计算相关的问题。换句话说，可能影响到计算的准确性和完整性。")]),v._v(" "),t("li",[v._v("尽量少用BLOB和TEXT，如果实在要用可以考虑将BLOB和TEXT字段单独存一张表，用id关联。")]),v._v(" "),t("li",[v._v("BLOB系列存储二进制字符串，与字符集无关。TEXT系列存储非二进制字符串，与字符集相关。")]),v._v(" "),t("li",[v._v("BLOB和TEXT都不能有默认值。")])]),v._v(" "),t("h3",{attrs:{id:"关于varchar类型长度扩容的那些二三事儿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于varchar类型长度扩容的那些二三事儿"}},[v._v("#")]),v._v(" 关于varchar类型长度扩容的那些二三事儿")]),v._v(" "),t("p",[v._v("MySQL官网有句话: L + 1 bytes if column values require 0 − 255 bytes, L + 2 bytes if values may require more than 255 bytes"),t("br")]),v._v(" "),t("p",[t("strong",[v._v("举个李子")]),v._v(":vachar(n) n的单位是字符，在utf8中"),t("strong",[v._v("一个字符占3个字节")]),v._v("，也就是说当n<=85时，vachar会用1字节来保存长度，当n>85时会用2字节保存长度。如果n设置小于等于85的话，考虑到以后扩容，会锁表。"),t("br"),v._v(" "),t("strong",[v._v("所以最好在设计表的时候将n>85(仅限于utf8下，如果是utf8mb4的话大于64即可，256/4=64。具体情况具体设计)")]),t("br")]),v._v(" "),t("p",[t("strong",[v._v("疑问:我将字段varchar长度设置为24，通过上面的理论最后字节数应该是73，可是通过explain查看keylen发现是74")]),t("br")]),v._v(" "),t("p",[v._v("我这边猜测的是：explain执行计划只是个借鉴值，并不是百分百精确值，想知道其中的缘由只有深入看mysql的源码了")]),v._v(" "),t("h2",{attrs:{id:"和java数据类型对应关系-转载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和java数据类型对应关系-转载"}},[v._v("#")]),v._v(" 和java数据类型对应关系 "),t("a",{attrs:{href:"https://blog.csdn.net/weixin_43108539/article/details/121772236",target:"_blank",rel:"noopener noreferrer"}},[v._v("转载"),t("OutboundLink")],1)]),v._v(" "),t("p",[v._v("MySQL Connector/J在处理MySQL数据类型和Java数据类型之间的转换方面非常灵活。\n--通常，任何MySQL数据类型都可以转换为java.lang.String和任何数字类型都可以转换为任何Java数字类型，尽管可能会发生舍入、溢出或精度损失。\n--Connector/J按照JDBC规范的要求发出警告或抛出DataTruncation异常，除非通过使用属性jdbcCompliantTruncation并将其设置为false，将连接配置为不这样做。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.staticaly.com/gh/lichangyu2022/blog-imgs@master/20220928/%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94.4qas1rsyuhe0.webp",alt:"类型对比"}})]),v._v(" "),t("p",[v._v("如果选择的Java数值数据类型的精度或容量低于您要转换的MySQL数据类型，则可能会出现舍入、溢出或精度损失")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.staticaly.com/gh/lichangyu2022/blog-imgs@master/20220928/%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%942.7duf76cpj140.webp",alt:"类型对比2"}})]),v._v(" "),t("h2",{attrs:{id:"数据类型选择建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型选择建议"}},[v._v("#")]),v._v(" 数据类型选择建议")]),v._v(" "),t("p",[v._v("在MySQL中，选择正确的数据类型，对于性能至关重要。一般应该遵循下面两步：")]),v._v(" "),t("ol",[t("li",[v._v("确定合适的大类型：数字、字符串、时间、二进制；")]),v._v(" "),t("li",[v._v("确定具体的类型：有无符号、取值范围、变长定长等。")])]),v._v(" "),t("p",[v._v("在MySQL数据类型设置方面，尽量用更小的数据类型，因为它们通常有更好的性能，花费更少的硬件资源。并且，尽量把字段定义为NOT NULL，避免使用NULL")])])}),[],!1,null,null,null);_.default=r.exports}}]);