(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{514:function(e,t,n){"use strict";n.r(t);var _=n(31),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_1-kubernetes-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-kubernetes-是什么"}},[e._v("#")]),e._v(" 1.Kubernetes 是什么？")]),e._v(" "),n("p",[n("strong",[e._v("传统部署时代")])]),e._v(" "),n("p",[e._v("早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资\n源边界，这会导致资源分配问题。 例如，如果在物理服务器上运行多个应用程序，则可能\n会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一\n种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩\n展， 并且维护许多物理服务器的成本很高。")]),e._v(" "),n("p",[n("strong",[e._v("虚拟化部署时代")])]),e._v(" "),n("p",[e._v("作为解决方案，引入了虚拟化。虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚\n拟机（VM）。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应\n用程序的信息 不能被另一应用程序随意访问。\n虚拟化技术能够更好地利用物理服务器上的资源，并且因为可轻松地添加或更新应用程序\n而可以实现更好的可伸缩性，降低硬件成本等等。\n每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。")]),e._v(" "),n("p",[n("strong",[e._v("容器部署时代")])]),e._v(" "),n("p",[e._v("容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。\n因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程\n空间等。 由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。\n容器因具有许多优势而变得流行起来。下面列出的是容器的一些好处：")]),e._v(" "),n("ul",[n("li",[e._v("敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性\n和效率。")]),e._v(" "),n("li",[e._v("持续开发、集成和部署：通过快速简单的回滚（由于镜像不可变性），支持可靠且频\n繁的 容器镜像构建和部署。")]),e._v(" "),n("li",[e._v("关注开发与运维的分离：在构建/发布时而不是在部署时创建应用程序容器镜像， 从\n而将应用程序与基础架构分离。")]),e._v(" "),n("li",[e._v("可观察性：不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状\n况和其他指标信号。")]),e._v(" "),n("li",[e._v("跨开发、测试和生产的环境一致性：在便携式计算机上与在云中相同地运行。")]),e._v(" "),n("li",[e._v("跨云和操作系统发行版本的可移植性：可在 Ubuntu、RHEL、CoreOS、本地、 Google\nKubernetes Engine 和其他任何地方运行。")]),e._v(" "),n("li",[e._v("以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资\n源在 OS 上运行应用程序。")]),e._v(" "),n("li",[e._v("松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分， 并\n且可以动态部署和管理 - 而不是在一台大型单机上整体运行。")]),e._v(" "),n("li",[e._v("资源隔离：可预测的应用程序性能。")]),e._v(" "),n("li",[e._v("资源利用：高效率和高密度。")])]),e._v(" "),n("p",[e._v("容器是捆绑和运行应用程序的好方法。在生产环境中，您需要管理运行应用程序的容器并确\n保没有停机时间。例如，如果一个容器发生故障，则另一个容器需要启动。如果这种行为由\n系统处理会不会更容易？")]),e._v(" "),n("hr"),e._v(" "),n("h1",{attrs:{id:"_2-为什么需要-kubernetes-它能做什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么需要-kubernetes-它能做什么"}},[e._v("#")]),e._v(" 2.为什么需要 Kubernetes，它能做什么?")]),e._v(" "),n("p",[n("strong",[e._v("服务发现和负载均衡")])]),e._v(" "),n("p",[e._v("Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大，\nKubernetes 可以负载均衡并分配网络流量，从而使部署稳定。")]),e._v(" "),n("p",[n("strong",[e._v("自动部署和回滚")])]),e._v(" "),n("p",[e._v("你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更\n改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容\n器并将它们的所有资源用于新容器。")]),e._v(" "),n("p",[n("strong",[e._v("自动完成装箱计算")])]),e._v(" "),n("p",[e._v("Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，\nKubernetes 可以做出更好的决策来管理容器的资源。")]),e._v(" "),n("p",[n("strong",[e._v("自我修复")])]),e._v(" "),n("p",[e._v("Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，\n并且在准备好服务之前不将其通告给客户端。")]),e._v(" "),n("p",[n("strong",[e._v("密钥与配置管理")])]),e._v(" "),n("p",[e._v("Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在\n不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。")]),e._v(" "),n("p",[n("strong",[e._v("弹性扩展")])]),e._v(" "),n("p",[e._v("定义期待的容器状态与资源，K8S 自动检测、创建、删除实例和配置以满足要求。")]),e._v(" "),n("p",[n("strong",[e._v("存储编排")])]),e._v(" "),n("p",[e._v("Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。")]),e._v(" "),n("hr"),e._v(" "),n("h1",{attrs:{id:"_3-k8s-容器生态系统及容器编排技术对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-k8s-容器生态系统及容器编排技术对比"}},[e._v("#")]),e._v(" 3.K8s 容器生态系统及容器编排技术对比")]),e._v(" "),n("p",[n("img",{attrs:{src:"/image/k8s/K8s%E5%AE%B9%E5%99%A8%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94.png",alt:""}})]),e._v(" "),n("hr"),e._v(" "),n("h1",{attrs:{id:"_4-kubernets-资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-kubernets-资源"}},[e._v("#")]),e._v(" 4.Kubernets 资源")]),e._v(" "),n("ul",[n("li",[e._v("中文社区"),n("br"),e._v(" "),n("a",{attrs:{href:"https://www.kubernetes.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.kubernetes.org.cn/"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("官方网址"),n("br"),e._v(" "),n("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/"),n("OutboundLink")],1)])]),e._v(" "),n("hr"),e._v(" "),n("h1",{attrs:{id:"_5-kubernetes-版本进化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-kubernetes-版本进化"}},[e._v("#")]),e._v(" 5.Kubernetes 版本进化")]),e._v(" "),n("ul",[n("li",[e._v("2014 年 6 月：谷歌宣布 kubernetes 开源。")]),e._v(" "),n("li",[e._v("2014 年 7 月：Mircrosoft、Red Hat、IBM、 Docker、 CoreOS、 Mesosphere 和\nSaltstack 加入 kubernetes。")]),e._v(" "),n("li",[e._v("2014 年 8 月： 2014 年 8 月 ：Mesosphere 宣布将 kubernetes 作为 frame 整合到\nmesosphere 生态系统中，用于 Docker 容器集群的调度、部署和管理")]),e._v(" "),n("li",[e._v("2014 年 8 月：VMware 加入 kubernetes 社区，")]),e._v(" "),n("li",[e._v("2014 年 11 月 ： HP 加入 kubernetes 社区。")]),e._v(" "),n("li",[e._v("2014 年 11 月：Google 容器引擎 Alpha 启动，谷歌宣布 GCE 中支持容器及服务，并\n以 kubernetes 为构架。")]),e._v(" "),n("li",[e._v("2015 年 1 月：Google 和 Mirantis 及伙伴将 kubernetes 引入 OpenStack， 开发者可\n以在 openstack 上部署运行 kubernetes 应用。")]),e._v(" "),n("li",[e._v("2015 年 4 月：Google 和 CoreOs 联合发布 Tectonic， 它将 kubernetes 和 CoreOS\n软件栈整合在了一起。")]),e._v(" "),n("li",[e._v("2015 年 5 月： Intel 加入 kubernetes 社区，宣布将合作加速 Tectonic 软件栈的发展\n进度。")]),e._v(" "),n("li",[e._v("2015 年 6 月：Google 容器引擎进入 beta 版。")]),e._v(" "),n("li",[e._v("2015 年 7 月：Google 正式加入 OpenStack 基金会，Kubernetes 的产品经理宣称将\n把它容器计算的专家技术带入 OpenStack")]),e._v(" "),n("li",[e._v("2015 年 7 月：Kuberentes v1.0 正式发布。")]),e._v(" "),n("li",[e._v("2017 年 9 月 ： Kuberentes v1.8 正式发布")]),e._v(" "),n("li",[e._v("2017 年 12 月 ： Kuberentes v1.9 正式发布")]),e._v(" "),n("li",[e._v("Current : Kuberentes 1.22")])])])}),[],!1,null,null,null);t.default=r.exports}}]);